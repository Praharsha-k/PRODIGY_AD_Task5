import cv2
from pyzbar.pyzbar import decode
import webbrowser

def scan_qr_code():
    # Open the default camera
    cap = cv2.VideoCapture(0)
    cap.set(3, 640)  # Width of the frame
    cap.set(4, 480)  # Height of the frame

    print("QR Code Scanner initialized. Press 'q' to exit.")

    while True:
        success, frame = cap.read()

        # If frame is successfully captured
        if success:
            # Decode the QR code(s)
            for qr_code in decode(frame):
                # Extract QR code data
                qr_data = qr_code.data.decode('utf-8')
                qr_type = qr_code.type

                # Draw a rectangle around the QR code
                points = qr_code.polygon
                if len(points) == 4:
                    pts = [tuple(point) for point in points]
                    cv2.polylines(frame, [np.array(pts, dtype=np.int32)], True, (0, 255, 0), 3)

                # Display the decoded data on the screen
                text = f"{qr_data} ({qr_type})"
                cv2.putText(frame, text, (qr_code.rect.left, qr_code.rect.top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

                # Print the data to the console
                print(f"QR Code Detected: {qr_data}")

                # Check if the scanned QR code is a URL
                if qr_data.startswith('http'):
                    print("Opening the URL in the browser...")
                    webbrowser.open(qr_data)

            # Show the video frame with the rectangle and decoded text
            cv2.imshow("QR Code Scanner", frame)

        # Exit the app when 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the camera and close all OpenCV windows
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    scan_qr_code()


